import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# Load and preprocess data
data = pd.read_csv("/content/WA_Fn-UseC_-Telco-Customer-Churn.csv")
data.drop(columns=['customerID'], inplace=True, errors='ignore')
data = data.dropna()
data['Churn'] = data['Churn'].apply(lambda x: 1 if x == 'Yes' else 0)
data = pd.get_dummies(data)

# Split full feature set first
X_full = data.drop('Churn', axis=1)
y = data['Churn']
X_train_full, X_test_full, y_train, y_test = train_test_split(X_full, y, test_size=0.2, random_state=42)

# Fit model on full data temporarily to get feature importances
temp_model = RandomForestClassifier(random_state=42, class_weight='balanced')
temp_model.fit(X_train_full, y_train)

# Select top N important features
importances = temp_model.feature_importances_
top_n = 30
indices = np.argsort(importances)[::-1][:top_n]
top_features = [X_full.columns[i] for i in indices]

# Reduce to top features and retrain model
X_train = X_train_full[top_features]
X_test = X_test_full[top_features]

model = RandomForestClassifier(random_state=42, class_weight='balanced')
model.fit(X_train, y_train)

# Predict and save results
X_test_copy = X_test.copy()
X_test_copy['Actual_Churn'] = y_test.values
X_test_copy['Predicted_Churn'] = model.predict(X_test)
X_test_copy.to_csv("churn_test_results.csv", index=False)

print(f"âœ… churn_test_results.csv saved with top {top_n} features:")
print(top_features)
